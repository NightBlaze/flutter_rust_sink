// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.22.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<ColorBoxActor>>
@sealed
class ColorBoxActor extends RustOpaque {
  ColorBoxActor.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  ColorBoxActor.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ColorBoxActor,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ColorBoxActor,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ColorBoxActorPtr,
  );

  ColorModel changeColor({dynamic hint}) =>
      RustLib.instance.api.colorBoxActorChangeColor(
        that: this,
      );

  static ColorBoxActor newColorBoxActor({dynamic hint}) =>
      RustLib.instance.api.colorBoxActorNew(hint: hint);

  Stream<ColorModel> setColorSink({dynamic hint}) =>
      RustLib.instance.api.colorBoxActorSetColorSink(
        that: this,
      );

  Future<void> startChangeColor({dynamic hint}) =>
      RustLib.instance.api.colorBoxActorStartChangeColor(
        that: this,
      );

  Future<void> stopChangeColor({dynamic hint}) =>
      RustLib.instance.api.colorBoxActorStopChangeColor(
        that: this,
      );

  Future<void> toggleLike({dynamic hint}) =>
      RustLib.instance.api.colorBoxActorToggleLike(
        that: this,
      );
}

class ColorModel {
  final int red;
  final int green;
  final int blue;

  const ColorModel({
    required this.red,
    required this.green,
    required this.blue,
  });

  String description({dynamic hint}) =>
      RustLib.instance.api.colorModelDescription(
        that: this,
      );

  static Future<ColorModel> newColorModel(
          {required int red,
          required int green,
          required int blue,
          dynamic hint}) =>
      RustLib.instance.api
          .colorModelNew(red: red, green: green, blue: blue, hint: hint);

  static Future<ColorModel> random({dynamic hint}) =>
      RustLib.instance.api.colorModelRandom(hint: hint);

  @override
  int get hashCode => red.hashCode ^ green.hashCode ^ blue.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ColorModel &&
          runtimeType == other.runtimeType &&
          red == other.red &&
          green == other.green &&
          blue == other.blue;
}
